import keyboard  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from rich.console import Console
from rich.panel import Panel
from rich.layout import Layout
from rich.table import Table
from rich.live import Live
from rich.text import Text
from rich.align import Align
from time import sleep

console = Console()


def create_menu(title, options, selected_option):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫—Ä–∞—Å–∏–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å–ø–∏—Å–∫–æ–º –æ–ø—Ü–∏–π."""
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏
    panels = []
    for index, label in enumerate(options):
        if index == selected_option:
            # –ê–∫—Ç–∏–≤–Ω–∞—è –æ–ø—Ü–∏—è: –ø–æ–¥—Å–≤–µ—Ç–∫–∞, –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ —Ä–∞–º–∫–∞
            panel = Panel(
                f"[bold underline white]{label}[/bold underline white]",
                border_style="bright_white",
                padding=(1, 10),
                title="[bold bright_white]SELECTED[/bold bright_white]",
                title_align="center",
            )
        else:
            # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –æ–ø—Ü–∏—è: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–∞–º–∫–∞ –∏ —Ç–µ–∫—Å—Ç
            panel = Panel(
                f"[bold]{label}[/bold]",
                border_style="dim",
                padding=(1, 10),
            )
        panels.append(panel)

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –æ–ø—Ü–∏–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ
    table = Table.grid(padding=(1, 0))
    for panel in panels:
        table.add_row(panel)

    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    centered_table = Align.center(table, vertical="middle")

    # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ –º–µ–Ω—é
    layout = Layout()
    layout.split_column(
        Layout(
            Align.center(
                Panel(f"[bold magenta]{title}[/]", border_style="cyan", padding=(1, 2)),
                vertical="middle",
            ),
            name="header",
            size=5,
        ),
        Layout(Align.center(centered_table, vertical="middle"), name="menu"),
        Layout(
            Align.center(
                Panel(
                    Text(
                        "Use [bold yellow]‚Üë[/] and [bold yellow]‚Üì[/] to navigate, [bold yellow]Enter[/] to select, or [bold yellow]Q[/] to quit.",
                        justify="center",
                    ),
                    border_style="green",
                ),
                vertical="middle",
            ),
            size=3,
        ),
    )
    return layout


def navigate(state, option):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é."""
    current_menu = state["current_menu"]
    if current_menu == "main":
        if option == 0:
            console.print("[bold green]üéÆ Starting a game with a human![/]")
        elif option == 1:
            console.print("[bold green]ü§ñ Starting a game with a bot![/]")
        elif option == 2:
            state["current_menu"] = "settings"
        elif option == 3:
            state["current_menu"] = "language"
        elif option == 4:
            console.clear()
            console.print(Panel("[bold red]Goodbye![/]", border_style="red", title="Exit", title_align="center"))
            return False
    elif current_menu == "settings" and option == len(state["menus"][current_menu]["options"]) - 1:
        state["current_menu"] = "main"
    elif current_menu == "language" and option == len(state["menus"][current_menu]["options"]) - 1:
        state["current_menu"] = "main"
    return True


def get_current_menu(state):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –º–µ–Ω—é."""
    menu_data = state["menus"][state["current_menu"]]
    return create_menu(menu_data["title"], menu_data["options"], state["selected_option"])


def run_menu():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–µ–Ω—é."""
    state = {
        "selected_option": 0,
        "current_menu": "main",
        "menus": {
            "main": {
                "title": "‚ú® Welcome to the Game ‚ú®",
                "options": ["üéÆ Play with a Human", "ü§ñ Play with a Bot", "‚öôÔ∏è Settings", "üåê Change Language", "‚ùå Exit"],
            },
            "settings": {
                "title": "üÉè Select Poker Type",
                "options": ["‚ô† Texas Hold'em", "‚ô£ Omaha", "‚ô• Seven Card Stud", "‚ô¶ Five Card Draw", "üîô Back"],
            },
            "language": {
                "title": "üåê Change Language",
                "options": ["üá¨üáß English", "üáµüá± Polish", "üîô Back"],
            },
        },
    }

    with Live(console=console, screen=True, refresh_per_second=10) as live:
        running = True
        while running:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            live.update(get_current_menu(state))

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
            if keyboard.is_pressed("up") or keyboard.is_pressed("w"):
                state["selected_option"] = (state["selected_option"] - 1) % len(state["menus"][state["current_menu"]]["options"])
                sleep(0.2)
            elif keyboard.is_pressed("down") or keyboard.is_pressed("s"):
                state["selected_option"] = (state["selected_option"] + 1) % len(state["menus"][state["current_menu"]]["options"])
                sleep(0.2)
            elif keyboard.is_pressed("enter"):
                running = navigate(state, state["selected_option"])
                sleep(0.2)
            elif keyboard.is_pressed("q"):
                running = False
                console.print(Panel("[bold red]Exiting the application...[/]", border_style="bright_red"))
                sleep(0.5)


# –ó–∞–ø—É—Å–∫
run_menu()
